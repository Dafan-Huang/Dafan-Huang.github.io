<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/02/08/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2><span id="quick-start">Quick Start</span></h2><h3><span id="create-a-new-post">Create a new post</span></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3><span id="run-server">Run server</span></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3><span id="generate-static-files">Generate static files</span></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3><span id="deploy-to-remote-sites">Deploy to remote sites</span></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>MarkDown语法</title>
    <url>/2023/02/16/MarkDown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1><span id="标题一-就是井号啦">标题一 “就是井号啦”</span></h1><h2><span id="标题二-好多井号啦">标题二 “好多井号啦”</span></h2><h3><span id="标题三">标题三</span></h3><span id="more"></span>

<h4><span id="标题四">标题四</span></h4><h5><span id="标题五">标题五</span></h5><h6><span id="标题六">标题六</span></h6><blockquote>
<p>引用 “&gt; “</p>
</blockquote>
<p>有序列表</p>
<ol>
<li>“1. “</li>
<li></li>
<li></li>
</ol>
<p>无序列表</p>
<ul>
<li>“- “</li>
<li></li>
<li></li>
</ul>
<p>待办事项</p>
<ul>
<li><p><input disabled type="checkbox">  “- [ ] “</p>
</li>
<li><p><input checked disabled type="checkbox">  “- [ ] “</p>
</li>
</ul>
<p>数学公式</p>
<p>$$<br>公式内容 “我也不会啦”<br>$$</p>
<p>表格</p>
<p>| 姓名 | 年龄 | 成绩 |</p>
<table>
<thead>
<tr>
<th>: — :</th>
<th></th>
<th>: —</th>
<th></th>
<th>—:</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>“qiqiguaiguai,meiyounaodai”</p>
<p>脚注：</p>
<p>你好世界！[^hdf]</p>
<p>横线：”—“</p>
<hr>
<p><a href="WWW.example.com">链接</a></p>
<p><a href="www.example.com">lianjie</a></p>
<p><em>斜体</em></p>
<p><strong>加粗</strong></p>
<p><code>printf(&quot;hello world!&quot;);</code></p>
<p><u>吓坏先</u>     “下划线”</p>
<p>表情</p>
<p>:baby:</p>
<p>:stuck_out_tongue_closed_eyes:</p>
<p><a href="https://unicode.org/emoji/charts/full-emoji-list.html">表情代码</a></p>
<p>$行内数学公式e^ie^π+1=0$</p>
<p>下标： H<del>2</del>O “~ ~”</p>
<p>上标：X^2^+Y^2^=Z^2^ “^ ^”</p>
<p>==高亮==</p>
<p>垃圾就这里:wastebasket:到吧!</p>
<p><del>反正也没人看</del></p>
<p><del>对吧!</del></p>
<p>[^hdf]: Hello world!</p>
]]></content>
      <tags>
        <tag>瞎叽霸乱写的</tag>
      </tags>
  </entry>
  <entry>
    <title>Visual Studio Code C/C++ 环境配置教程</title>
    <url>/2023/02/09/Visual-Studio-Code-C-C-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1><span id="写在前面">写在前面</span></h1><p>Visual Studio Code（简称VS Code）是一款轻量、高效、美观的跨平台代码编辑器。它内置了对JavaScript、TypeScript 和Node.js 的支持，并为其他语言（如C++、C#、Java） 、Python、PHP、Go）和运行时（如 .NET 和 Unity）提供了丰富的扩展生态系统。</p>
<span id="more"></span>

<h1><span id="安装-cc-环境">安装 C/C++ 环境</span></h1><p>VS Code 是一个编辑器（编辑器）而不是 IDE（集成开发环境），所以想要 VS Code 能够编写或调试 C/C++ 程序，需要额外安装 C/C++ 环境。</p>
<p>安装环境的方案有很多，主要分为两种：</p>
<ul>
<li>单独安装编译器，这样可以自行指定安装的编译器的版本。</li>
<li>使用IDE的环境，如Dev-C++、Code::Blocks、Visual Studio等。</li>
</ul>
<p>本文件将获取第一种方法：从 Winlibs 获取 GCC 和 MinGW-w64，并为其配置环境变量。</p>
<p>官网：<a href="https://winlibs.com/">WinLibs 独立构建的 GCC 和 MinGW-w64 for Windows</a></p>
<p>直接下载 Win64 | 没有 LLVM/Clang/LLD/LLDB | Zip archive 版本的安装包即可。然后我们将其解压到用户目录下的<code>AppData/Local/Programs</code>文件夹中，确保解压后路径为<code>C:/Users/username/AppData/Local/Programs/mingw64/</code>。</p>
<h2><span id="配置环境变化量">配置环境变化量</span></h2><p>配置环境变化量的成功标志是否可以在指令行中调用<code>g++</code>。</p>
<p>步骤如下：</p>
<ol>
<li>快捷键<code>win + r</code>打开运行栏，键进入<code>SYSDM.CPL</code>并回车。即可打开「系统属性（系统属性）」页面。</li>
<li>依次点击「高级（高级）」标签、「环境变量（环境变量）」按钮，即可打开「环境变量（环境变量）」页面。</li>
<li>双点击「username 的用户变量（username 的用户变量）」栏的路径字符串，即可打开「编辑环境变量（编辑环境变量）」页面。</li>
<li>点击“新建（New）”，输入编译器路径（<code>C:\Users\username\AppData\Local\Programs\mingw64\bin</code>），点击“确定（OK）”即可。</li>
</ol>
<p>检查环境变化量是否配置成功，可以在命令行窗口中键进入<code>g++ --version</code>并返回。如果显示能够显示g++的版本信息就说明配置成功了。</p>
<p>修改环境变量不会对已经启动的最终生成有效，因此修改完成后需要重新启动最终。同理VS Code也需要重新启动。</p>
<h1><span id="安装-vs-code">安装 VS Code</span></h1><p>可以在官网下载，也可以在Microsoft Store中安装，也可以使用WinGet进行安装。</p>
<p>官网：<a href="https://code.visualstudio.com/">Visual Studio Code</a></p>
<h2><span id="vs-code-安装-cc-插件">VS Code 安装 C/C++ 插件</span></h2><p>点击左侧「扩展（扩展）」进入应用商店，搜索 C/C++ 进行安装（发布者为 Microsoft）。</p>
<p>VS Code 可以通过安装插件来设置显示语言为中文（如果你需要的的话），插件名为<code>Chinese (Simplified) Language Pack for Visual Studio Code</code>。</p>
<p>##VS Code 创建项目文件夹</p>
<p>参考：<a href="https://code.visualstudio.com/docs/cpp/config-mingw">将 GCC 与 MinGW 结合使用</a></p>
<p>dev-c ++可以或，vs vs代码的的只的的文件夹中进行。。你需要建立建立一一个夹</p>
<p>MinGW的GDB不能调试中文路径的程序，因此请尽量避免使用中文路径名称。以下两种情况请特别注意：</p>
<ol>
<li>用户文件夹名为中文，而你的项目恰好在桌面文件夹、文档等目录下。如：<code>C:/Users/柏咕咕/Desktop/Project</code>。</li>
<li>程序文件名为中文，文件名也被视为路途的一部分。如：<code>C:/Users/username/Desktop/Project/项目.cpp</code>。</li>
</ol>
<p>推荐在用户目录（例如：<code>C:/Users/username</code>）下新构建<code>workspace</code>文件夹，作为所有的项目目录的总文件夹。每次需要新构建项目时，可以直接在<code>workspace</code>文件夹下新构建文件夹V，赋S代码。</p>
<p>假定「项目文件夹」为cpp-space，路径为<code>C:/Users/username/workspace/cpp-space</code>。在VS Code中依次点击「文件（File）」和「打开文件夹（Open File）」，选择<code>cpp-space</code>即可打开文件夹。</p>
<h2><span id="vs-code-创建配置文件">VS Code 创建配置文件</span></h2><p>接下来我们在项目中新建配置文件（资源管理器或者VS Code都可以新建），结构目录如下：</p>
<pre class="line-numbers language-none"><code class="language-none">. 
└── cpp-space 
    ├── test.cpp 
    └── .vscode 
        ├── launch.json 
        └── tasks.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>以下是分别对应的文件的内容，直接复制粘贴即可。</p>
<p>task.json</p>
<pre class="line-numbers language-task.json" data-language="task.json"><code class="language-task.json">&#123;
    &quot;version&quot;: &quot;2.0.0&quot;,
    &quot;tasks&quot;: [
        &#123;
            &quot;label&quot;: &quot;g++ build&quot;,
            &quot;command&quot;: &quot;C:\\Users\\username\\AppData\\Local\\Programs\\mingw64\\bin\\g++.exe&quot;,
            &quot;args&quot;: [
                &quot;-fdiagnostics-color&#x3D;always&quot;,
                &quot;-Wfatal-errors&quot;,
                &quot;-Wextra&quot;,
                &quot;-Wall&quot;,
                &quot;-g&quot;,
                &quot;$&#123;relativeFile&#125;&quot;,
                &quot;-o&quot;,
                &quot;$&#123;relativeFileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;,
                &quot;-std&#x3D;c++11&quot;
            ],
            &quot;options&quot;: &#123;
                &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;
            &#125;,
            &quot;problemMatcher&quot;: [
                &quot;$gcc&quot;
            ]
        &#125;
    ]
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>launch.json </p>
<pre class="line-numbers language-launch.json" data-language="launch.json"><code class="language-launch.json">&#123;
    &quot;version&quot;: &quot;0.2.0&quot;,
    &quot;configurations&quot;: [
        &#123;
            &quot;name&quot;: &quot;(GDB) Launch &amp; Pause&quot;,
            &quot;type&quot;: &quot;cppdbg&quot;,
            &quot;request&quot;: &quot;launch&quot;,
            &quot;program&quot;: &quot;C:\\Windows\\System32\\cmd.exe&quot;,
            &quot;args&quot;: [
                &quot;&#x2F;C&quot;,
                &quot;$&#123;relativeFileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;,
                &quot;&amp;&quot;,
                &quot;pause&quot;
            ],
            &quot;stopAtEntry&quot;: false,
            &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;,
            &quot;environment&quot;: [],
            &quot;externalConsole&quot;: true,
            &quot;MIMode&quot;: &quot;gdb&quot;,
            &quot;miDebuggerPath&quot;: &quot;C:\\Users\\username\\AppData\\Local\\Programs\\mingw64\\bin\\gdb.exe&quot;,
            &quot;setupCommands&quot;: [
                &#123;
                    &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,
                    &quot;text&quot;: &quot;-enable-pretty-printing&quot;,
                    &quot;ignoreFailures&quot;: true
                &#125;
            ],
            &quot;preLaunchTask&quot;: &quot;g++ build&quot;,
        &#125;,
        &#123;
            &quot;name&quot;: &quot;(GDB) Launch&quot;,
            &quot;type&quot;: &quot;cppdbg&quot;,
            &quot;request&quot;: &quot;launch&quot;,
            &quot;program&quot;: &quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;,
            &quot;args&quot;: [],
            &quot;stopAtEntry&quot;: false,
            &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;,
            &quot;environment&quot;: [],
            &quot;externalConsole&quot;: true,
            &quot;MIMode&quot;: &quot;gdb&quot;,
            &quot;miDebuggerPath&quot;: &quot;C:\\Users\\username\\AppData\\Local\\Programs\\mingw64\\bin\\gdb.exe&quot;,
            &quot;setupCommands&quot;: [
                &#123;
                    &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,
                    &quot;text&quot;: &quot;-enable-pretty-printing&quot;,
                    &quot;ignoreFailures&quot;: true
                &#125;
            ],
            &quot;preLaunchTask&quot;: &quot;g++ build&quot;,
        &#125;
    ]
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>配置文件中包含了编译器路径：<code>tasks.json</code> 中的 <code>command</code> 字段和 <code>launch.json</code> 中的<strong>两个</strong> <code>miDebuggerPath</code> 字段。如果你将编译器安装到了其他路径，那么你需要修改这两个字段的值。</p>
<p>具体地，你需要把 <code>C:\\Users\\username\\AppData\\Local\\Programs\\mingw64\\bin\\</code> 替换为实际的编译器路径。以 Dev-C++ 的默认编译器路径为例，<code>miDebuggerPath</code> 字段的值应为 <code>C:\\Program Files\\Dev-C++\\MinGW64\\bin\\gdb.exe</code>。</p>
<p>配置完成后我们在 <code>test.cpp</code> 的代码页按 <code>F5</code>，即可编译并运行程序。我们在弹出的窗口键入 <code>1 2</code>，在第二行出现了 <code>3</code>，说明配置成功！</p>
<p>实际上该配置文件中包含两种运行方案，你可以在 VS Code 最左侧的「运行与调试（Run and Debug）」栏中切换方案。两种方案的区别会在下文进行解释。</p>
<h1><span id="配置文件的解释">配置文件的解释</span></h1><h2><span id="tasksjson">tasks.json</span></h2><p><code>tasks.json</code> 用于描述任务，这里我们只添加了一个任务：<code>g++ build</code>，用于生成可执行文件。</p>
<p>注意看 <code>tasks.json</code> 的 <code>command</code> <code>args</code> 字段，实际上对应了如下命令。</p>
<pre class="line-numbers language-none"><code class="language-none">C:&#x2F;Users&#x2F;username&#x2F;AppData&#x2F;Local&#x2F;Programs&#x2F;mingw64&#x2F;bin&#x2F;g++.exe -fdiagnostics-color&#x3D;always -Wfatal-errors -Wextra -Wall -g Code.cpp -o .&#x2F;Code.exe -std&#x3D;c++11<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这个命令就是我们手写编译时的命令，解释一下部分编译选项：</p>
<ul>
<li><code>-fdiagnostics-color=always</code>：显示彩色诊断信息。</li>
<li><code>-Wfatal-errors</code>：让编译器在遇到第一个错误时中止编译，而不是尝试继续并打印进一步的错误消息。</li>
<li><code>-Wextra</code>：对于部分事件打印额外的警告信息。</li>
<li><code>-Wall</code>：启用更多更严格的警告信息。</li>
<li><code>-g</code>: 编译器在编译时产生调试信息。</li>
<li><code>-std=c++11</code>：使用 <code>C++11</code> 标准。</li>
</ul>
<h2><span id="launchjson">launch.json</span></h2><p><code>launch.json</code> 文件用于配置调试器，这里我们添加了两个任务：<code>(GDB) Launch &amp; Pause</code> 和 <code>(GDB) Launch</code>，分别代表 release 和 debug 模式下的运行。</p>
<p>当我们无需进行调试的时候，我们可以使用 <code>(GDB) Launch &amp; Pause</code>，程序运行结束后还要再按一次按键才会退出窗口。这和 Dev-C++ 的表现一致。</p>
<p>当我们需要调试时，我们可以使用 <code>(GDB) Launch</code>，此时 VS Code 中设置的断点将会生效，并支持单步调试。</p>
<p>解释一下配置文件的部分字段：</p>
<ul>
<li><p><code>program</code> 与 <code>args</code>：调用的程序和给定的参数。</p>
</li>
<li><p><code>preLaunchTask</code>：调试器启动前执行的任务，这里执行的任务就是 <code>tasks.json</code> 的任务，需要保证该字段的值在 <code>tasks.json</code> 中有对应的 <code>label</code>。</p>
</li>
<li><p><code>cwd</code>：调试器启动时的工作目录，这里设置为「项目文件夹」。</p>
</li>
</ul>
<!-- toc -->



<!-- tocstop -->

<p>[TOC]</p>
]]></content>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>南京游记</title>
    <url>/2023/04/09/%E5%8D%97%E4%BA%AC%E6%B8%B8%E8%AE%B0/</url>
    <content><![CDATA[<p>你想去哪里玩呢？</p>
<p>玄武湖、鸡鸣寺、明孝陵、音乐台、美龄宫、明城墙、</p>
<p>夫子庙、新街口、大报恩寺、老门东、南京眼、颐和路、</p>
<p>阅江楼、中山码头、紫峰大厦、珍珠泉、栖霞山、欢乐谷、牛首山</p>
<span id="more"></span>

<p>玄武湖：<br>鸡鸣寺：<br>明孝陵：<br>音乐台：<br>美龄宫：<br>明城墙：<br>夫子庙：<br>新街口：<br>大报恩寺：<br>老门东：<br>南京眼：<br>颐和路：<br>阅江楼：<br>中山码头：<br>紫峰大厦：<br>珍珠泉：<br>栖霞山：<br>欢乐谷：<br>牛首山：</p>
<p>未完待续······</p>
<p>我都能陪你一起！</p>
]]></content>
      <tags>
        <tag>旅游</tag>
      </tags>
  </entry>
  <entry>
    <title>测试文章</title>
    <url>/2023/02/08/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<p>你好，世界！<br>Hllow world!<br>Добрый день, Мир!<br>Bonjour, le monde!</p>
<span id="more"></span>
<p>「こんにちは世界」<br>Selam Dünya!<br>Bonjour le monde!<br>Hallo Welt!<br>Привет, мир!<br>:H:e:l:l:o: :W:o:r:l:d!<br>!dlroW olleH<br>沵恏，迣鎅!<br>مرحبا العالم!<br>Tere maailm!<br>Përshëndetje bota!<br>ሰላም ዓለም!<br>ନିଶ୍ଚିତ ବିଶ୍ବ!<br>ipberrhTeoSnae<br>Salut mundo!<br>hola mundu!<br>Kamisaki uraqpachana!<br>ᑳᑮᔮ ᒋᐃᑕᐃᔑ ᒡ<br>Байрай yáтаг!<br>kenaammachuBarr<br>Witaj świat!<br>Здравей, свят!</p>
]]></content>
  </entry>
  <entry>
    <title>南邮图书管理系统</title>
    <url>/2023/03/19/%E5%8D%97%E9%82%AE%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1><span id="程序设计题南邮图书馆管理系统">程序设计题：南邮图书馆管理系统</span></h1><span id="more"></span>

<p>出题人：周剑</p>
<p><strong>面向专业：光电信息科学与工程</strong></p>
<p><strong>难度等级：4</strong></p>
<h2><span id="1-问题描述">1 问题描述</span></h2><p>该系统要求建立一个南邮图书馆管理系统，并具有排序、查找、计算、显示等功能。通过此课题，熟练掌握文件、数组、指针的各种操作，以及一些算法思想的应用。</p>
<p>图书的信息应包括：索引号，名称，馆藏地址（三牌楼、仙林）、类别（人文、科技、外语等），数量，价格，入库日期，归还日期，借阅次数，借阅状态（可借、不可借）。</p>
<h2><span id="2-功能要求">2 功能要求</span></h2><p>代码要能提供以下几个基本功能。</p>
<p>（1）对已图书信息进行更新操作，包括添加和删除一种书的信息、修改图书信息（例如图书被借阅，书的数目减1，借阅次数加1，如果数量为0则状态为不可借）；</p>
<p>（2）通过按图书的名称查询图书信息；</p>
<p>（3）显示所有即将到期的图书（归还日期在三天之内）；</p>
<p>（4）按借阅次数对所有图书进行排序；</p>
<p>（5）将图书的所有相关信息内容存为文件。</p>
<p><strong>选做要求</strong>：</p>
<p>（1）对用户的输入进行一定的正确性检查。</p>
<p>（2）采用Turbo C/C++、MFC等开发工具，实现彩色或图形操作界面。</p>
<p>（3）设计一个功能选项“AI玩家”。当选中此功能后，用电脑模拟用户来玩猜数字游戏，并将整个游戏的过程输出至屏幕或文本文件。</p>
<h2><span id="3-其他要求">3 其他要求</span></h2><p>（1）界面友好，输入信息符合逻辑。</p>
<p>（2）注释详细：每个变量都要求有注释说明用途；函数有注释说明功能，对参数、返回值也要以注释的形式说明用途；关键的语句段要求有注释解释。</p>
<p>（3）程序的层次清晰，可读性强。</p>
<p>（4）变量、函数命名符合规范。</p>
<h2><span id="4-开发环境">4 开发环境</span></h2><p>可以选择TC2.0、TC3.0、VC++6.0等开发环境，或者与老师讨论，选择自己熟悉的开发工具与平台。</p>
]]></content>
      <tags>
        <tag>程序设计题</tag>
      </tags>
  </entry>
</search>
